/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/solid-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as TechnologiesRouteImport } from './routes/technologies'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TechnologiesCategoryRouteImport } from './routes/technologies.$category'
import { Route as TechnologiesIdNameRouteImport } from './routes/technologies.$id.$name'

const TechnologiesCreateLazyRouteImport = createFileRoute(
  '/technologies/create',
)()

const TechnologiesRoute = TechnologiesRouteImport.update({
  id: '/technologies',
  path: '/technologies',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TechnologiesCreateLazyRoute = TechnologiesCreateLazyRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => TechnologiesRoute,
} as any).lazy(() =>
  import('./routes/technologies.create.lazy').then((d) => d.Route),
)
const TechnologiesCategoryRoute = TechnologiesCategoryRouteImport.update({
  id: '/$category',
  path: '/$category',
  getParentRoute: () => TechnologiesRoute,
} as any)
const TechnologiesIdNameRoute = TechnologiesIdNameRouteImport.update({
  id: '/$id/$name',
  path: '/$id/$name',
  getParentRoute: () => TechnologiesRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/technologies': typeof TechnologiesRouteWithChildren
  '/technologies/$category': typeof TechnologiesCategoryRoute
  '/technologies/create': typeof TechnologiesCreateLazyRoute
  '/technologies/$id/$name': typeof TechnologiesIdNameRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/technologies': typeof TechnologiesRouteWithChildren
  '/technologies/$category': typeof TechnologiesCategoryRoute
  '/technologies/create': typeof TechnologiesCreateLazyRoute
  '/technologies/$id/$name': typeof TechnologiesIdNameRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/technologies': typeof TechnologiesRouteWithChildren
  '/technologies/$category': typeof TechnologiesCategoryRoute
  '/technologies/create': typeof TechnologiesCreateLazyRoute
  '/technologies/$id/$name': typeof TechnologiesIdNameRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/technologies'
    | '/technologies/$category'
    | '/technologies/create'
    | '/technologies/$id/$name'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/technologies'
    | '/technologies/$category'
    | '/technologies/create'
    | '/technologies/$id/$name'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/technologies'
    | '/technologies/$category'
    | '/technologies/create'
    | '/technologies/$id/$name'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  TechnologiesRoute: typeof TechnologiesRouteWithChildren
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/technologies': {
      id: '/technologies'
      path: '/technologies'
      fullPath: '/technologies'
      preLoaderRoute: typeof TechnologiesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/technologies/create': {
      id: '/technologies/create'
      path: '/create'
      fullPath: '/technologies/create'
      preLoaderRoute: typeof TechnologiesCreateLazyRouteImport
      parentRoute: typeof TechnologiesRoute
    }
    '/technologies/$category': {
      id: '/technologies/$category'
      path: '/$category'
      fullPath: '/technologies/$category'
      preLoaderRoute: typeof TechnologiesCategoryRouteImport
      parentRoute: typeof TechnologiesRoute
    }
    '/technologies/$id/$name': {
      id: '/technologies/$id/$name'
      path: '/$id/$name'
      fullPath: '/technologies/$id/$name'
      preLoaderRoute: typeof TechnologiesIdNameRouteImport
      parentRoute: typeof TechnologiesRoute
    }
  }
}

interface TechnologiesRouteChildren {
  TechnologiesCategoryRoute: typeof TechnologiesCategoryRoute
  TechnologiesCreateLazyRoute: typeof TechnologiesCreateLazyRoute
  TechnologiesIdNameRoute: typeof TechnologiesIdNameRoute
}

const TechnologiesRouteChildren: TechnologiesRouteChildren = {
  TechnologiesCategoryRoute: TechnologiesCategoryRoute,
  TechnologiesCreateLazyRoute: TechnologiesCreateLazyRoute,
  TechnologiesIdNameRoute: TechnologiesIdNameRoute,
}

const TechnologiesRouteWithChildren = TechnologiesRoute._addFileChildren(
  TechnologiesRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  TechnologiesRoute: TechnologiesRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
